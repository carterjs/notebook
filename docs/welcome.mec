# Welcome to Mech

Hello and welcome to the documentation for Mech, a programming language for developing data-driven, reactive systems like animations, games, and robots. It focuses on making composing, transforming, and distributing data easy. Mech is a dataflow language, meaning that instead of specifying state transitions and the flow of control (as in imperative languages), in Mech you specify data dependencies and transformations. The job of a Mech programmer is to select sources of data, mold those data into new shapes, and then do something useful with them -- whether that be to produce a visualization, drive an external device, or run a simulation. 

Mech is best suited for systems that rely on streams of asynchronous input frin a variety of sources. For example, a turn-based game (like tic-tac-toe for example) is driven by a stream of input from one or more controllers representing the players. Each time a player interacts with the game, the state of the game is updated. A real-time game (like pong for example) is additionally driven by a timer. Players move paddles on the screen, to deflect a ball, whose position is updated on every tick of the game clock. Or take a robot for example, which depends on streams of sensor input from devices like cameras or accelerometers. These data are transformed by the robot to estimate position and velocity, which are then used to issue commands to motors that move the robot through space. In each of these examples, computation only happens in the presence of data. Data arrives at the system, the system reacts to its arrival by executing computations and updating state, and then the system awaits the arrival of new data to continue. This is the lifecycle of a Mech program.

